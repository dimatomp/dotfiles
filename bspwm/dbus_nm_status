#! /usr/bin/env nix-shell
#! nix-shell -i python36 -p python36Packages.dbus-python python36Packages.pygobject3

import dbus
import gi.repository.GObject
import sys
from dbus.mainloop.glib import DBusGMainLoop

DBusGMainLoop(set_as_default=True)
bus = dbus.SystemBus()

NM_BUS = 'org.freedesktop.NetworkManager'
NM_WIRELESS_DEVICE = NM_BUS + ".Device.Wireless"
NM_ACCESS_POINT = NM_BUS + ".AccessPoint"
NM_PATH = '/org/freedesktop/NetworkManager'

cSsid = None
cStrength = None

prefix = ' '.join(sys.argv[1:])

def updateRate(message):
    global cSsid, cStrength
    if 'Ssid' in message:
        cSsid = str(bytes(map(int, message['Ssid'])), encoding='utf8') if message['Ssid'] else None
    if 'Strength' in message:
        cStrength = int(message['Strength'])
    if cSsid:
        sticks = min(4, cStrength // 20)
        print(prefix + cSsid, '[' + '|' * sticks + '-' * (4 - sticks) + ']')
    else:
        print(prefix + 'No WiFi connection')
    sys.stdout.flush()

def refreshAccessPoint(newAP):
    bus.remove_signal_receiver(updateRate)
    if not newAP or newAP == '/':
        updateRate({'Ssid': None})
    else:
        apObject = bus.get_object(NM_BUS, newAP)
        apProps = dbus.Interface(apObject, dbus.PROPERTIES_IFACE)
        updateRate(apProps.GetAll(NM_ACCESS_POINT))
        apObject.connect_to_signal('PropertiesChanged', updateRate, NM_ACCESS_POINT)

try:
    manager = dbus.Interface(bus.get_object(NM_BUS, NM_PATH), NM_BUS)
    iface_path = manager.GetDeviceByIpIface('wlo1')
    iface = dbus.Interface(bus.get_object(NM_BUS, iface_path), dbus.PROPERTIES_IFACE)
    refreshAccessPoint(iface.Get(NM_WIRELESS_DEVICE, 'ActiveAccessPoint'))
except dbus.DBusException as e:
    print(e)
    updateRate({})

def dispatchAPMessage(message):
    if 'ActiveAccessPoint' in message:
        refreshAccessPoint(message['ActiveAccessPoint'])
bus.add_signal_receiver(dispatchAPMessage, 'PropertiesChanged', NM_WIRELESS_DEVICE, NM_BUS)

gi.repository.GObject.MainLoop().run()
